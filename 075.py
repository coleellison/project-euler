#Project Euler Problem 75
#https://projecteuler.net/problem=75

from math import gcd

perimeter = lambda m,n: 2 * m * (m + n) #perimeter of a right triangle generated by euclid's method

biggest = 1500000
m = 2
vals = []
maxm = int((biggest // 2) ** .5) + 1 #max value of m without exceeding upper limit
for i in range(2, maxm):
    for j in range(1,i):
        val = perimeter(i,j)
        if val <= biggest:
            if (i + j) % 2 == 1: #one odd, one even
                if gcd(i,j) == 1: #relatively prime
                    vals.append(val)
        else: #once we surpass maximum, try new m (as n increases for fixed m, perimeter strictly increasing)
            break

total = 0
counts = [0 for i in range(biggest)] #pseudo-sieve
for i in vals:
    for j in range(i, biggest, i): #add one for each multiple
        counts[j] += 1
print(counts.count(1)) #how many triangles can be uniquely generated